<?xml version="1.0" encoding="UTF-8"?>
<project name="IQNWSAlert" default="help">

	<!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
	<property file="local.properties" />

	<!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the
         default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
         -->
	<property file="build.properties" />

	<!-- The default.properties file is created and updated by the 'android'
         tool, as well as ADT.
         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
	<property file="default.properties" />

	<!-- Custom Android task to deal with the project target, and import the
         proper rules.
         This requires ant 1.6.0 or above. -->
	<path id="android.antlibs">
		<pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
		<pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
		<pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
	</path>

	<taskdef name="setup" classname="com.android.ant.SetupTask" classpathref="android.antlibs" />

	<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
	<target name="-pre-build" depends="update-version">
	</target>
	<!--
    <target name="-pre-compile">
    </target>

    [This is typically used for code obfuscation.
     Compiled code location: ${out.classes.absolute.dir}
     If this is not done in place, override ${out.dex.input.absolute.dir}]
    <target name="-post-compile">
    </target>
-->


	<!-- Execute the Android Setup task that will setup some properties
         specific to the target, and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <setup> task.
             - customize it to your needs.
         - Customize the whole script.
             - copy/paste the content of the rules files (minus the top node)
               into this file, *after* the <setup> task
             - disable the import of the rules by changing the setup task
               below to <setup import="false" />. 
             - customize to your needs.
    -->
	<setup />

	<target name="update-version" description="Updates the Version.java file with current SVN revision">
		<echo>Updating resources with SVN revision and build date...</echo>
		<property name="revision" value="HEAD" />
		<tstamp>
			<format property="build.date" pattern="yyyy.MM.dd" />
		</tstamp>

		<!-- Get the version name from the android manifest, will end up in property ${manifest.android:versionName} -->
		<xpath input="AndroidManifest.xml" expression="/manifest/@android:versionName" output="manifest.version.name" />

		<!-- find out svn.revision of HEAD, need svn.exe installed on local machine will end up in property ${Revision} -->
		<exec executable="svn" output="svnlog.out">
			<arg line="info -r ${revision}" />
		</exec>

		<loadproperties srcFile="svnlog.out">
			<filterchain>
				<linecontains>
					<contains value="Revision" />
				</linecontains>
			</filterchain>
		</loadproperties>

		<delete file="svnlog.out" />

		<replaceregexp file="${resource.absolute.dir}/values/notrans.xml" encoding="utf8" match='(\x3Cstring name="msg_version">)[^\x3C]*(\x3C/string>)' replace='\1${ant.project.name} ${manifest.version.name} (r${Revision} ${build.date})\2' />

        <echo>Updated "msg_version" to: ${ant.project.name} ${manifest.version.name} (r${Revision} ${build.date})</echo>
		</target>

		<target name="help">
			<!-- displays starts at col 13
          |13                                                              80| -->
			<echo>Android Ant Build. Available targets:</echo>
			<echo>   help:      Displays this help.</echo>
			<echo>   clean:     Removes output files created by other targets.</echo>
			<echo>   compile:   Compiles project's .java files into .class files.</echo>
			<echo>   debug:     Builds the application and signs it with a debug key.</echo>
			<echo>   release:   Builds the application. The generated apk file must be</echo>
			<echo>              signed before it is published.</echo>
			<!--
			<echo>   install:   Installs/reinstalls the debug package onto a running</echo>
			<echo>              emulator or device.</echo>
			<echo>              If the application was previously installed, the</echo>
			<echo>              signatures must match.</echo>
			<echo>   uninstall: Uninstalls the application from a running emulator or</echo>
			<echo>              device.</echo>
			<echo>   proguard:  use before build statements like "debug" and "release"</echo>
			<echo>              to enable proguard dead code removal. NOTE: You must</echo>
			<echo>              have tools/proguard.jar available. See the README.</echo>
			-->
		</target>

	</project>
